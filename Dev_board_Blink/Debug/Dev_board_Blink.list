
Dev_board_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002984  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002b0c  08002b0c  00003b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b40  08002b40  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002b40  08002b40  00003b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b48  08002b48  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b48  08002b48  00003b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b4c  08002b4c  00003b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002b50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          000001b8  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007903  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001511  00000000  00000000  0000b99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  0000ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000545  00000000  00000000  0000d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d34  00000000  00000000  0000daed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008478  00000000  00000000  0002e821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c465d  00000000  00000000  00036c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fb2f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002194  00000000  00000000  000fb33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000091  00000000  00000000  000fd4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002af4 	.word	0x08002af4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08002af4 	.word	0x08002af4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == 1 || fd == 2){
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d002      	beq.n	800050c <_write+0x18>
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2b02      	cmp	r3, #2
 800050a:	d111      	bne.n	8000530 <_write+0x3c>
		hstatus = HAL_UART_Transmit(&huart4, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	b29a      	uxth	r2, r3
 8000510:	f04f 33ff 	mov.w	r3, #4294967295
 8000514:	68b9      	ldr	r1, [r7, #8]
 8000516:	4809      	ldr	r0, [pc, #36]	@ (800053c <_write+0x48>)
 8000518:	f001 fa84 	bl	8001a24 <HAL_UART_Transmit>
 800051c:	4603      	mov	r3, r0
 800051e:	75fb      	strb	r3, [r7, #23]
				if (hstatus == HAL_OK)
 8000520:	7dfb      	ldrb	r3, [r7, #23]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d101      	bne.n	800052a <_write+0x36>
					return len;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	e004      	b.n	8000534 <_write+0x40>
				else
					return -1;
 800052a:	f04f 33ff 	mov.w	r3, #4294967295
 800052e:	e001      	b.n	8000534 <_write+0x40>
	}
	return -1;
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000534:	4618      	mov	r0, r3
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000084 	.word	0x20000084

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fa78 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f80c 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f89e 	bl	800068c <MX_GPIO_Init>
  MX_UART4_Init();
 8000550:	f000 f872 	bl	8000638 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  printf("First application starting\n");
 8000554:	4802      	ldr	r0, [pc, #8]	@ (8000560 <main+0x20>)
 8000556:	f001 ff39 	bl	80023cc <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055a:	bf00      	nop
 800055c:	e7fd      	b.n	800055a <main+0x1a>
 800055e:	bf00      	nop
 8000560:	08002b0c 	.word	0x08002b0c

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	@ 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	@ 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f002 f80a 	bl	800258c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b28      	ldr	r3, [pc, #160]	@ (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	@ (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	@ 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	@ (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <SystemClock_Config+0xd0>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d8:	23a8      	movs	r3, #168	@ 0xa8
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fd33 	bl	8001054 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 f8b8 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2105      	movs	r1, #5
 8000616:	4618      	mov	r0, r3
 8000618:	f000 ff94 	bl	8001544 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000622:	f000 f8a1 	bl	8000768 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	@ 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <MX_UART4_Init+0x4c>)
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <MX_UART4_Init+0x50>)
 8000640:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000642:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <MX_UART4_Init+0x4c>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <MX_UART4_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_UART4_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <MX_UART4_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_UART4_Init+0x4c>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <MX_UART4_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <MX_UART4_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	@ (8000684 <MX_UART4_Init+0x4c>)
 8000670:	f001 f988 	bl	8001984 <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800067a:	f000 f875 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000084 	.word	0x20000084
 8000688:	40004c00 	.word	0x40004c00

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	@ 0x28
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b2d      	ldr	r3, [pc, #180]	@ (800075c <MX_GPIO_Init+0xd0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a2c      	ldr	r2, [pc, #176]	@ (800075c <MX_GPIO_Init+0xd0>)
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b2a      	ldr	r3, [pc, #168]	@ (800075c <MX_GPIO_Init+0xd0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0310 	and.w	r3, r3, #16
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b26      	ldr	r3, [pc, #152]	@ (800075c <MX_GPIO_Init+0xd0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a25      	ldr	r2, [pc, #148]	@ (800075c <MX_GPIO_Init+0xd0>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b23      	ldr	r3, [pc, #140]	@ (800075c <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a1e      	ldr	r2, [pc, #120]	@ (800075c <MX_GPIO_Init+0xd0>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b18      	ldr	r3, [pc, #96]	@ (800075c <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a17      	ldr	r2, [pc, #92]	@ (800075c <MX_GPIO_Init+0xd0>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2180      	movs	r1, #128	@ 0x80
 8000716:	4812      	ldr	r0, [pc, #72]	@ (8000760 <MX_GPIO_Init+0xd4>)
 8000718:	f000 fc82 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800071c:	2310      	movs	r3, #16
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000720:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000726:	2301      	movs	r3, #1
 8000728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	480c      	ldr	r0, [pc, #48]	@ (8000764 <MX_GPIO_Init+0xd8>)
 8000732:	f000 fad9 	bl	8000ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000736:	2380      	movs	r3, #128	@ 0x80
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800073a:	2311      	movs	r3, #17
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073e:	2301      	movs	r3, #1
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	4804      	ldr	r0, [pc, #16]	@ (8000760 <MX_GPIO_Init+0xd4>)
 800074e:	f000 facb 	bl	8000ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	@ 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40020000 	.word	0x40020000
 8000764:	40021000 	.word	0x40021000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000782:	4a0f      	ldr	r2, [pc, #60]	@ (80007c0 <HAL_MspInit+0x4c>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000788:	6453      	str	r3, [r2, #68]	@ 0x44
 800078a:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079e:	4a08      	ldr	r2, [pc, #32]	@ (80007c0 <HAL_MspInit+0x4c>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a19      	ldr	r2, [pc, #100]	@ (8000848 <HAL_UART_MspInit+0x84>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d12b      	bne.n	800083e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b18      	ldr	r3, [pc, #96]	@ (800084c <HAL_UART_MspInit+0x88>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	4a17      	ldr	r2, [pc, #92]	@ (800084c <HAL_UART_MspInit+0x88>)
 80007f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <HAL_UART_MspInit+0x88>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <HAL_UART_MspInit+0x88>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a10      	ldr	r2, [pc, #64]	@ (800084c <HAL_UART_MspInit+0x88>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <HAL_UART_MspInit+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800081e:	2303      	movs	r3, #3
 8000820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800082e:	2308      	movs	r3, #8
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	@ (8000850 <HAL_UART_MspInit+0x8c>)
 800083a:	f000 fa55 	bl	8000ce8 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	@ 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40004c00 	.word	0x40004c00
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <NMI_Handler+0x4>

0800085c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <MemManage_Handler+0x4>

0800086c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <UsageFault_Handler+0x4>

0800087c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008aa:	f000 f917 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	e00a      	b.n	80008da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008c4:	f3af 8000 	nop.w
 80008c8:	4601      	mov	r1, r0
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	60ba      	str	r2, [r7, #8]
 80008d0:	b2ca      	uxtb	r2, r1
 80008d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	3301      	adds	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	429a      	cmp	r2, r3
 80008e0:	dbf0      	blt.n	80008c4 <_read+0x12>
  }

  return len;
 80008e2:	687b      	ldr	r3, [r7, #4]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <_close>:
  }
  return len;
}

int _close(int file)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000914:	605a      	str	r2, [r3, #4]
  return 0;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <_isatty>:

int _isatty(int file)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800092c:	2301      	movs	r3, #1
}
 800092e:	4618      	mov	r0, r3
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800093a:	b480      	push	{r7}
 800093c:	b085      	sub	sp, #20
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800095c:	4a14      	ldr	r2, [pc, #80]	@ (80009b0 <_sbrk+0x5c>)
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <_sbrk+0x60>)
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000968:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000970:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <_sbrk+0x64>)
 8000972:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <_sbrk+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	429a      	cmp	r2, r3
 8000982:	d207      	bcs.n	8000994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000984:	f001 fe50 	bl	8002628 <__errno>
 8000988:	4603      	mov	r3, r0
 800098a:	220c      	movs	r2, #12
 800098c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	e009      	b.n	80009a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099a:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	4a05      	ldr	r2, [pc, #20]	@ (80009b8 <_sbrk+0x64>)
 80009a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20020000 	.word	0x20020000
 80009b4:	00000400 	.word	0x00000400
 80009b8:	200000cc 	.word	0x200000cc
 80009bc:	20000220 	.word	0x20000220

080009c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009e8:	f7ff ffea 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	@ (8000a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	@ (8000a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	@ (8000a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a12:	f001 fe0f 	bl	8002634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fd93 	bl	8000540 <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a28:	08002b50 	.word	0x08002b50
  ldr r2, =_sbss
 8000a2c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a30:	20000220 	.word	0x20000220

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0d      	ldr	r2, [pc, #52]	@ (8000a78 <HAL_Init+0x40>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <HAL_Init+0x40>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	@ (8000a78 <HAL_Init+0x40>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f90d 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	200f      	movs	r0, #15
 8000a68:	f000 f808 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff fe82 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <HAL_InitTick+0x54>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <HAL_InitTick+0x58>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f917 	bl	8000cce <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00e      	b.n	8000ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d80a      	bhi.n	8000ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f000 f8ed 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4a06      	ldr	r2, [pc, #24]	@ (8000ad8 <HAL_InitTick+0x5c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008
 8000b00:	200000d0 	.word	0x200000d0

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200000d0 	.word	0x200000d0

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	@ (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	@ (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	@ 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff47 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff5c 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffb0 	bl	8000c3c <SysTick_Config>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	@ 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	e16b      	b.n	8000fdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d04:	2201      	movs	r2, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f040 815a 	bne.w	8000fd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d005      	beq.n	8000d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d130      	bne.n	8000d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	f003 0201 	and.w	r2, r3, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d017      	beq.n	8000dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d123      	bne.n	8000e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	69b9      	ldr	r1, [r7, #24]
 8000e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0203 	and.w	r2, r3, #3
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 80b4 	beq.w	8000fd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b60      	ldr	r3, [pc, #384]	@ (8000ff4 <HAL_GPIO_Init+0x30c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	4a5f      	ldr	r2, [pc, #380]	@ (8000ff4 <HAL_GPIO_Init+0x30c>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ff4 <HAL_GPIO_Init+0x30c>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8000ff8 <HAL_GPIO_Init+0x310>)
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a52      	ldr	r2, [pc, #328]	@ (8000ffc <HAL_GPIO_Init+0x314>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d02b      	beq.n	8000f0e <HAL_GPIO_Init+0x226>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a51      	ldr	r2, [pc, #324]	@ (8001000 <HAL_GPIO_Init+0x318>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d025      	beq.n	8000f0a <HAL_GPIO_Init+0x222>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a50      	ldr	r2, [pc, #320]	@ (8001004 <HAL_GPIO_Init+0x31c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01f      	beq.n	8000f06 <HAL_GPIO_Init+0x21e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4f      	ldr	r2, [pc, #316]	@ (8001008 <HAL_GPIO_Init+0x320>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d019      	beq.n	8000f02 <HAL_GPIO_Init+0x21a>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4e      	ldr	r2, [pc, #312]	@ (800100c <HAL_GPIO_Init+0x324>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x216>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4d      	ldr	r2, [pc, #308]	@ (8001010 <HAL_GPIO_Init+0x328>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x212>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4c      	ldr	r2, [pc, #304]	@ (8001014 <HAL_GPIO_Init+0x32c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x20e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8001018 <HAL_GPIO_Init+0x330>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x20a>
 8000eee:	2307      	movs	r3, #7
 8000ef0:	e00e      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	e00c      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	e00a      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000efa:	2305      	movs	r3, #5
 8000efc:	e008      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000f02:	2303      	movs	r3, #3
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x228>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	f002 0203 	and.w	r2, r2, #3
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f20:	4935      	ldr	r1, [pc, #212]	@ (8000ff8 <HAL_GPIO_Init+0x310>)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800101c <HAL_GPIO_Init+0x334>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f52:	4a32      	ldr	r2, [pc, #200]	@ (800101c <HAL_GPIO_Init+0x334>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f58:	4b30      	ldr	r3, [pc, #192]	@ (800101c <HAL_GPIO_Init+0x334>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f7c:	4a27      	ldr	r2, [pc, #156]	@ (800101c <HAL_GPIO_Init+0x334>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f82:	4b26      	ldr	r3, [pc, #152]	@ (800101c <HAL_GPIO_Init+0x334>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800101c <HAL_GPIO_Init+0x334>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <HAL_GPIO_Init+0x334>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd0:	4a12      	ldr	r2, [pc, #72]	@ (800101c <HAL_GPIO_Init+0x334>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	f67f ae90 	bls.w	8000d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3724      	adds	r7, #36	@ 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400
 8001004:	40020800 	.word	0x40020800
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40021000 	.word	0x40021000
 8001010:	40021400 	.word	0x40021400
 8001014:	40021800 	.word	0x40021800
 8001018:	40021c00 	.word	0x40021c00
 800101c:	40013c00 	.word	0x40013c00

08001020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800103c:	e003      	b.n	8001046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	041a      	lsls	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	619a      	str	r2, [r3, #24]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e267      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d075      	beq.n	800115e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001072:	4b88      	ldr	r3, [pc, #544]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b04      	cmp	r3, #4
 800107c:	d00c      	beq.n	8001098 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800107e:	4b85      	ldr	r3, [pc, #532]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001086:	2b08      	cmp	r3, #8
 8001088:	d112      	bne.n	80010b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108a:	4b82      	ldr	r3, [pc, #520]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001092:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001096:	d10b      	bne.n	80010b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	4b7e      	ldr	r3, [pc, #504]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d05b      	beq.n	800115c <HAL_RCC_OscConfig+0x108>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d157      	bne.n	800115c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e242      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010b8:	d106      	bne.n	80010c8 <HAL_RCC_OscConfig+0x74>
 80010ba:	4b76      	ldr	r3, [pc, #472]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a75      	ldr	r2, [pc, #468]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e01d      	b.n	8001104 <HAL_RCC_OscConfig+0xb0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010d0:	d10c      	bne.n	80010ec <HAL_RCC_OscConfig+0x98>
 80010d2:	4b70      	ldr	r3, [pc, #448]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b6d      	ldr	r3, [pc, #436]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e00b      	b.n	8001104 <HAL_RCC_OscConfig+0xb0>
 80010ec:	4b69      	ldr	r3, [pc, #420]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a68      	ldr	r2, [pc, #416]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80010f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b66      	ldr	r3, [pc, #408]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a65      	ldr	r2, [pc, #404]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80010fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d013      	beq.n	8001134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fcfa 	bl	8000b04 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fcf6 	bl	8000b04 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	@ 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e207      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	4b5b      	ldr	r3, [pc, #364]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f0      	beq.n	8001114 <HAL_RCC_OscConfig+0xc0>
 8001132:	e014      	b.n	800115e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fce6 	bl	8000b04 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fce2 	bl	8000b04 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	@ 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1f3      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	4b51      	ldr	r3, [pc, #324]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0xe8>
 800115a:	e000      	b.n	800115e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d063      	beq.n	8001232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800116a:	4b4a      	ldr	r3, [pc, #296]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001176:	4b47      	ldr	r3, [pc, #284]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800117e:	2b08      	cmp	r3, #8
 8001180:	d11c      	bne.n	80011bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001182:	4b44      	ldr	r3, [pc, #272]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d116      	bne.n	80011bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	4b41      	ldr	r3, [pc, #260]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d005      	beq.n	80011a6 <HAL_RCC_OscConfig+0x152>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d001      	beq.n	80011a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e1c7      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4937      	ldr	r1, [pc, #220]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	e03a      	b.n	8001232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d020      	beq.n	8001206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c4:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <HAL_RCC_OscConfig+0x244>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	f7ff fc9b 	bl	8000b04 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d2:	f7ff fc97 	bl	8000b04 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1a8      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f0:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4925      	ldr	r1, [pc, #148]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 8001200:	4313      	orrs	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
 8001204:	e015      	b.n	8001232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001206:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <HAL_RCC_OscConfig+0x244>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff fc7a 	bl	8000b04 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001214:	f7ff fc76 	bl	8000b04 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e187      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001226:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d036      	beq.n	80012ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d016      	beq.n	8001274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <HAL_RCC_OscConfig+0x248>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff fc5a 	bl	8000b04 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fc56 	bl	8000b04 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e167      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_RCC_OscConfig+0x240>)
 8001268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x200>
 8001272:	e01b      	b.n	80012ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <HAL_RCC_OscConfig+0x248>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fc43 	bl	8000b04 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	e00e      	b.n	80012a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001282:	f7ff fc3f 	bl	8000b04 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d907      	bls.n	80012a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e150      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
 8001294:	40023800 	.word	0x40023800
 8001298:	42470000 	.word	0x42470000
 800129c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a0:	4b88      	ldr	r3, [pc, #544]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1ea      	bne.n	8001282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 8097 	beq.w	80013e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012be:	4b81      	ldr	r3, [pc, #516]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10f      	bne.n	80012ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	4b7d      	ldr	r3, [pc, #500]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a7c      	ldr	r2, [pc, #496]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b7a      	ldr	r3, [pc, #488]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e6:	2301      	movs	r3, #1
 80012e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	4b77      	ldr	r3, [pc, #476]	@ (80014c8 <HAL_RCC_OscConfig+0x474>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d118      	bne.n	8001328 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f6:	4b74      	ldr	r3, [pc, #464]	@ (80014c8 <HAL_RCC_OscConfig+0x474>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a73      	ldr	r2, [pc, #460]	@ (80014c8 <HAL_RCC_OscConfig+0x474>)
 80012fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001302:	f7ff fbff 	bl	8000b04 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130a:	f7ff fbfb 	bl	8000b04 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e10c      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131c:	4b6a      	ldr	r3, [pc, #424]	@ (80014c8 <HAL_RCC_OscConfig+0x474>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d106      	bne.n	800133e <HAL_RCC_OscConfig+0x2ea>
 8001330:	4b64      	ldr	r3, [pc, #400]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001334:	4a63      	ldr	r2, [pc, #396]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6713      	str	r3, [r2, #112]	@ 0x70
 800133c:	e01c      	b.n	8001378 <HAL_RCC_OscConfig+0x324>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b05      	cmp	r3, #5
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x30c>
 8001346:	4b5f      	ldr	r3, [pc, #380]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800134a:	4a5e      	ldr	r2, [pc, #376]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6713      	str	r3, [r2, #112]	@ 0x70
 8001352:	4b5c      	ldr	r3, [pc, #368]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001356:	4a5b      	ldr	r2, [pc, #364]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6713      	str	r3, [r2, #112]	@ 0x70
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0x324>
 8001360:	4b58      	ldr	r3, [pc, #352]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001364:	4a57      	ldr	r2, [pc, #348]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001366:	f023 0301 	bic.w	r3, r3, #1
 800136a:	6713      	str	r3, [r2, #112]	@ 0x70
 800136c:	4b55      	ldr	r3, [pc, #340]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001370:	4a54      	ldr	r2, [pc, #336]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001372:	f023 0304 	bic.w	r3, r3, #4
 8001376:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d015      	beq.n	80013ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001380:	f7ff fbc0 	bl	8000b04 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001386:	e00a      	b.n	800139e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001388:	f7ff fbbc 	bl	8000b04 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e0cb      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139e:	4b49      	ldr	r3, [pc, #292]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0ee      	beq.n	8001388 <HAL_RCC_OscConfig+0x334>
 80013aa:	e014      	b.n	80013d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fbaa 	bl	8000b04 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b4:	f7ff fba6 	bl	8000b04 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e0b5      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ca:	4b3e      	ldr	r3, [pc, #248]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1ee      	bne.n	80013b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013dc:	4b39      	ldr	r3, [pc, #228]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	4a38      	ldr	r2, [pc, #224]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a1 	beq.w	8001534 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013f2:	4b34      	ldr	r3, [pc, #208]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d05c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d141      	bne.n	800148a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001406:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <HAL_RCC_OscConfig+0x478>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fb7a 	bl	8000b04 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fb76 	bl	8000b04 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e087      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001426:	4b27      	ldr	r3, [pc, #156]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69da      	ldr	r2, [r3, #28]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001440:	019b      	lsls	r3, r3, #6
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	3b01      	subs	r3, #1
 800144c:	041b      	lsls	r3, r3, #16
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001454:	061b      	lsls	r3, r3, #24
 8001456:	491b      	ldr	r1, [pc, #108]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <HAL_RCC_OscConfig+0x478>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fb4f 	bl	8000b04 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146a:	f7ff fb4b 	bl	8000b04 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e05c      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x416>
 8001488:	e054      	b.n	8001534 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <HAL_RCC_OscConfig+0x478>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fb38 	bl	8000b04 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001498:	f7ff fb34 	bl	8000b04 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e045      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_RCC_OscConfig+0x470>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x444>
 80014b6:	e03d      	b.n	8001534 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d107      	bne.n	80014d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e038      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000
 80014cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <HAL_RCC_OscConfig+0x4ec>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d028      	beq.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d121      	bne.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d11a      	bne.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001500:	4013      	ands	r3, r2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001508:	4293      	cmp	r3, r2
 800150a:	d111      	bne.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	3b01      	subs	r3, #1
 800151a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d107      	bne.n	8001530 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0cc      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001558:	4b68      	ldr	r3, [pc, #416]	@ (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d90c      	bls.n	8001580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b65      	ldr	r3, [pc, #404]	@ (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b63      	ldr	r3, [pc, #396]	@ (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0b8      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001598:	4b59      	ldr	r3, [pc, #356]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a58      	ldr	r2, [pc, #352]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b0:	4b53      	ldr	r3, [pc, #332]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a52      	ldr	r2, [pc, #328]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015bc:	4b50      	ldr	r3, [pc, #320]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	494d      	ldr	r1, [pc, #308]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d044      	beq.n	8001664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b47      	ldr	r3, [pc, #284]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d119      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e07f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d003      	beq.n	8001602 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001602:	4b3f      	ldr	r3, [pc, #252]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e06f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001612:	4b3b      	ldr	r3, [pc, #236]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e067      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001622:	4b37      	ldr	r3, [pc, #220]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 0203 	bic.w	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4934      	ldr	r1, [pc, #208]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001634:	f7ff fa66 	bl	8000b04 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	e00a      	b.n	8001652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163c:	f7ff fa62 	bl	8000b04 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e04f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 020c 	and.w	r2, r3, #12
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	429a      	cmp	r2, r3
 8001662:	d1eb      	bne.n	800163c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001664:	4b25      	ldr	r3, [pc, #148]	@ (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d20c      	bcs.n	800168c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e032      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4916      	ldr	r1, [pc, #88]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b6:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	490e      	ldr	r1, [pc, #56]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ca:	f000 f821 	bl	8001710 <HAL_RCC_GetSysClockFreq>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	490a      	ldr	r1, [pc, #40]	@ (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	5ccb      	ldrb	r3, [r1, r3]
 80016de:	fa22 f303 	lsr.w	r3, r2, r3
 80016e2:	4a09      	ldr	r2, [pc, #36]	@ (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff f9c6 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023c00 	.word	0x40023c00
 8001700:	40023800 	.word	0x40023800
 8001704:	08002b28 	.word	0x08002b28
 8001708:	20000000 	.word	0x20000000
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001714:	b094      	sub	sp, #80	@ 0x50
 8001716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001728:	4b79      	ldr	r3, [pc, #484]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x200>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	d00d      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x40>
 8001734:	2b08      	cmp	r3, #8
 8001736:	f200 80e1 	bhi.w	80018fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x34>
 800173e:	2b04      	cmp	r3, #4
 8001740:	d003      	beq.n	800174a <HAL_RCC_GetSysClockFreq+0x3a>
 8001742:	e0db      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001744:	4b73      	ldr	r3, [pc, #460]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x204>)
 8001746:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001748:	e0db      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800174a:	4b73      	ldr	r3, [pc, #460]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x208>)
 800174c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800174e:	e0d8      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001750:	4b6f      	ldr	r3, [pc, #444]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x200>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001758:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800175a:	4b6d      	ldr	r3, [pc, #436]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x200>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d063      	beq.n	800182e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001766:	4b6a      	ldr	r3, [pc, #424]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x200>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	099b      	lsrs	r3, r3, #6
 800176c:	2200      	movs	r2, #0
 800176e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001770:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001778:	633b      	str	r3, [r7, #48]	@ 0x30
 800177a:	2300      	movs	r3, #0
 800177c:	637b      	str	r3, [r7, #52]	@ 0x34
 800177e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001782:	4622      	mov	r2, r4
 8001784:	462b      	mov	r3, r5
 8001786:	f04f 0000 	mov.w	r0, #0
 800178a:	f04f 0100 	mov.w	r1, #0
 800178e:	0159      	lsls	r1, r3, #5
 8001790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001794:	0150      	lsls	r0, r2, #5
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4621      	mov	r1, r4
 800179c:	1a51      	subs	r1, r2, r1
 800179e:	6139      	str	r1, [r7, #16]
 80017a0:	4629      	mov	r1, r5
 80017a2:	eb63 0301 	sbc.w	r3, r3, r1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017b4:	4659      	mov	r1, fp
 80017b6:	018b      	lsls	r3, r1, #6
 80017b8:	4651      	mov	r1, sl
 80017ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017be:	4651      	mov	r1, sl
 80017c0:	018a      	lsls	r2, r1, #6
 80017c2:	4651      	mov	r1, sl
 80017c4:	ebb2 0801 	subs.w	r8, r2, r1
 80017c8:	4659      	mov	r1, fp
 80017ca:	eb63 0901 	sbc.w	r9, r3, r1
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017e2:	4690      	mov	r8, r2
 80017e4:	4699      	mov	r9, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	eb18 0303 	adds.w	r3, r8, r3
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	462b      	mov	r3, r5
 80017f0:	eb49 0303 	adc.w	r3, r9, r3
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001802:	4629      	mov	r1, r5
 8001804:	024b      	lsls	r3, r1, #9
 8001806:	4621      	mov	r1, r4
 8001808:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800180c:	4621      	mov	r1, r4
 800180e:	024a      	lsls	r2, r1, #9
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001816:	2200      	movs	r2, #0
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800181a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800181c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001820:	f7fe fcd2 	bl	80001c8 <__aeabi_uldivmod>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4613      	mov	r3, r2
 800182a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800182c:	e058      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182e:	4b38      	ldr	r3, [pc, #224]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x200>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	099b      	lsrs	r3, r3, #6
 8001834:	2200      	movs	r2, #0
 8001836:	4618      	mov	r0, r3
 8001838:	4611      	mov	r1, r2
 800183a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
 8001844:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001848:	4642      	mov	r2, r8
 800184a:	464b      	mov	r3, r9
 800184c:	f04f 0000 	mov.w	r0, #0
 8001850:	f04f 0100 	mov.w	r1, #0
 8001854:	0159      	lsls	r1, r3, #5
 8001856:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800185a:	0150      	lsls	r0, r2, #5
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4641      	mov	r1, r8
 8001862:	ebb2 0a01 	subs.w	sl, r2, r1
 8001866:	4649      	mov	r1, r9
 8001868:	eb63 0b01 	sbc.w	fp, r3, r1
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001878:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800187c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001880:	ebb2 040a 	subs.w	r4, r2, sl
 8001884:	eb63 050b 	sbc.w	r5, r3, fp
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	00eb      	lsls	r3, r5, #3
 8001892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001896:	00e2      	lsls	r2, r4, #3
 8001898:	4614      	mov	r4, r2
 800189a:	461d      	mov	r5, r3
 800189c:	4643      	mov	r3, r8
 800189e:	18e3      	adds	r3, r4, r3
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	464b      	mov	r3, r9
 80018a4:	eb45 0303 	adc.w	r3, r5, r3
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018b6:	4629      	mov	r1, r5
 80018b8:	028b      	lsls	r3, r1, #10
 80018ba:	4621      	mov	r1, r4
 80018bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018c0:	4621      	mov	r1, r4
 80018c2:	028a      	lsls	r2, r1, #10
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ca:	2200      	movs	r2, #0
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	61fa      	str	r2, [r7, #28]
 80018d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018d4:	f7fe fc78 	bl	80001c8 <__aeabi_uldivmod>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4613      	mov	r3, r2
 80018de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	3301      	adds	r3, #1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80018f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018fa:	e002      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x204>)
 80018fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001904:	4618      	mov	r0, r3
 8001906:	3750      	adds	r7, #80	@ 0x50
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	00f42400 	.word	0x00f42400
 8001918:	007a1200 	.word	0x007a1200

0800191c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <HAL_RCC_GetHCLKFreq+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000000 	.word	0x20000000

08001934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001938:	f7ff fff0 	bl	800191c <HAL_RCC_GetHCLKFreq>
 800193c:	4602      	mov	r2, r0
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	0a9b      	lsrs	r3, r3, #10
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	4903      	ldr	r1, [pc, #12]	@ (8001958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800194a:	5ccb      	ldrb	r3, [r1, r3]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	08002b38 	.word	0x08002b38

0800195c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001960:	f7ff ffdc 	bl	800191c <HAL_RCC_GetHCLKFreq>
 8001964:	4602      	mov	r2, r0
 8001966:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	0b5b      	lsrs	r3, r3, #13
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	4903      	ldr	r1, [pc, #12]	@ (8001980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001972:	5ccb      	ldrb	r3, [r1, r3]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	08002b38 	.word	0x08002b38

08001984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e042      	b.n	8001a1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d106      	bne.n	80019b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7fe ff0a 	bl	80007c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2224      	movs	r2, #36	@ 0x24
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f973 	bl	8001cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695a      	ldr	r2, [r3, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	@ 0x28
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d175      	bne.n	8001b30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <HAL_UART_Transmit+0x2c>
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e06e      	b.n	8001b32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2221      	movs	r2, #33	@ 0x21
 8001a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a62:	f7ff f84f 	bl	8000b04 <HAL_GetTick>
 8001a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	88fa      	ldrh	r2, [r7, #6]
 8001a6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a7c:	d108      	bne.n	8001a90 <HAL_UART_Transmit+0x6c>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d104      	bne.n	8001a90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	e003      	b.n	8001a98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a98:	e02e      	b.n	8001af8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2180      	movs	r1, #128	@ 0x80
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f848 	bl	8001b3a <UART_WaitOnFlagUntilTimeout>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e03a      	b.n	8001b32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10b      	bne.n	8001ada <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ad0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	e007      	b.n	8001aea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1cb      	bne.n	8001a9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2140      	movs	r1, #64	@ 0x40
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f814 	bl	8001b3a <UART_WaitOnFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e006      	b.n	8001b32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e000      	b.n	8001b32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b30:	2302      	movs	r3, #2
  }
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4613      	mov	r3, r2
 8001b48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b4a:	e03b      	b.n	8001bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b52:	d037      	beq.n	8001bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b54:	f7fe ffd6 	bl	8000b04 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	6a3a      	ldr	r2, [r7, #32]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d302      	bcc.n	8001b6a <UART_WaitOnFlagUntilTimeout+0x30>
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e03a      	b.n	8001be4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d023      	beq.n	8001bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b80      	cmp	r3, #128	@ 0x80
 8001b80:	d020      	beq.n	8001bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b40      	cmp	r3, #64	@ 0x40
 8001b86:	d01d      	beq.n	8001bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d116      	bne.n	8001bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f81d 	bl	8001bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e00f      	b.n	8001be4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d0b4      	beq.n	8001b4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b095      	sub	sp, #84	@ 0x54
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bfe:	e853 3f00 	ldrex	r3, [r3]
 8001c02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	330c      	adds	r3, #12
 8001c12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c14:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c1c:	e841 2300 	strex	r3, r2, [r1]
 8001c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e5      	bne.n	8001bf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	3314      	adds	r3, #20
 8001c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	e853 3f00 	ldrex	r3, [r3]
 8001c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3314      	adds	r3, #20
 8001c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c50:	e841 2300 	strex	r3, r2, [r1]
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e5      	bne.n	8001c28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d119      	bne.n	8001c98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	330c      	adds	r3, #12
 8001c6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	e853 3f00 	ldrex	r3, [r3]
 8001c72:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f023 0310 	bic.w	r3, r3, #16
 8001c7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	330c      	adds	r3, #12
 8001c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c84:	61ba      	str	r2, [r7, #24]
 8001c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c88:	6979      	ldr	r1, [r7, #20]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	e841 2300 	strex	r3, r2, [r1]
 8001c90:	613b      	str	r3, [r7, #16]
   return(result);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e5      	bne.n	8001c64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001ca6:	bf00      	nop
 8001ca8:	3754      	adds	r7, #84	@ 0x54
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb8:	b0c0      	sub	sp, #256	@ 0x100
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cd0:	68d9      	ldr	r1, [r3, #12]
 8001cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	ea40 0301 	orr.w	r3, r0, r1
 8001cdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001d0c:	f021 010c 	bic.w	r1, r1, #12
 8001d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d1a:	430b      	orrs	r3, r1
 8001d1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d2e:	6999      	ldr	r1, [r3, #24]
 8001d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	ea40 0301 	orr.w	r3, r0, r1
 8001d3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b8f      	ldr	r3, [pc, #572]	@ (8001f80 <UART_SetConfig+0x2cc>)
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d005      	beq.n	8001d54 <UART_SetConfig+0xa0>
 8001d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f84 <UART_SetConfig+0x2d0>)
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d104      	bne.n	8001d5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d54:	f7ff fe02 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 8001d58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001d5c:	e003      	b.n	8001d66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d5e:	f7ff fde9 	bl	8001934 <HAL_RCC_GetPCLK1Freq>
 8001d62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d70:	f040 810c 	bne.w	8001f8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001d7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001d82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d86:	4622      	mov	r2, r4
 8001d88:	462b      	mov	r3, r5
 8001d8a:	1891      	adds	r1, r2, r2
 8001d8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001d8e:	415b      	adcs	r3, r3
 8001d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d96:	4621      	mov	r1, r4
 8001d98:	eb12 0801 	adds.w	r8, r2, r1
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	eb43 0901 	adc.w	r9, r3, r1
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001db6:	4690      	mov	r8, r2
 8001db8:	4699      	mov	r9, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	eb18 0303 	adds.w	r3, r8, r3
 8001dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001dc4:	462b      	mov	r3, r5
 8001dc6:	eb49 0303 	adc.w	r3, r9, r3
 8001dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001dda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001dde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001de2:	460b      	mov	r3, r1
 8001de4:	18db      	adds	r3, r3, r3
 8001de6:	653b      	str	r3, [r7, #80]	@ 0x50
 8001de8:	4613      	mov	r3, r2
 8001dea:	eb42 0303 	adc.w	r3, r2, r3
 8001dee:	657b      	str	r3, [r7, #84]	@ 0x54
 8001df0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001df4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001df8:	f7fe f9e6 	bl	80001c8 <__aeabi_uldivmod>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4b61      	ldr	r3, [pc, #388]	@ (8001f88 <UART_SetConfig+0x2d4>)
 8001e02:	fba3 2302 	umull	r2, r3, r3, r2
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	011c      	lsls	r4, r3, #4
 8001e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001e1c:	4642      	mov	r2, r8
 8001e1e:	464b      	mov	r3, r9
 8001e20:	1891      	adds	r1, r2, r2
 8001e22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e24:	415b      	adcs	r3, r3
 8001e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e2c:	4641      	mov	r1, r8
 8001e2e:	eb12 0a01 	adds.w	sl, r2, r1
 8001e32:	4649      	mov	r1, r9
 8001e34:	eb43 0b01 	adc.w	fp, r3, r1
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e4c:	4692      	mov	sl, r2
 8001e4e:	469b      	mov	fp, r3
 8001e50:	4643      	mov	r3, r8
 8001e52:	eb1a 0303 	adds.w	r3, sl, r3
 8001e56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001e5a:	464b      	mov	r3, r9
 8001e5c:	eb4b 0303 	adc.w	r3, fp, r3
 8001e60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001e70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001e74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	18db      	adds	r3, r3, r3
 8001e7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e7e:	4613      	mov	r3, r2
 8001e80:	eb42 0303 	adc.w	r3, r2, r3
 8001e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001e8e:	f7fe f99b 	bl	80001c8 <__aeabi_uldivmod>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4611      	mov	r1, r2
 8001e98:	4b3b      	ldr	r3, [pc, #236]	@ (8001f88 <UART_SetConfig+0x2d4>)
 8001e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2264      	movs	r2, #100	@ 0x64
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	1acb      	subs	r3, r1, r3
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001eae:	4b36      	ldr	r3, [pc, #216]	@ (8001f88 <UART_SetConfig+0x2d4>)
 8001eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001ebc:	441c      	add	r4, r3
 8001ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ec8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001ecc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	464b      	mov	r3, r9
 8001ed4:	1891      	adds	r1, r2, r2
 8001ed6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ed8:	415b      	adcs	r3, r3
 8001eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001edc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1851      	adds	r1, r2, r1
 8001ee4:	6339      	str	r1, [r7, #48]	@ 0x30
 8001ee6:	4649      	mov	r1, r9
 8001ee8:	414b      	adcs	r3, r1
 8001eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001ef8:	4659      	mov	r1, fp
 8001efa:	00cb      	lsls	r3, r1, #3
 8001efc:	4651      	mov	r1, sl
 8001efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f02:	4651      	mov	r1, sl
 8001f04:	00ca      	lsls	r2, r1, #3
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	189b      	adds	r3, r3, r2
 8001f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f14:	464b      	mov	r3, r9
 8001f16:	460a      	mov	r2, r1
 8001f18:	eb42 0303 	adc.w	r3, r2, r3
 8001f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001f30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001f34:	460b      	mov	r3, r1
 8001f36:	18db      	adds	r3, r3, r3
 8001f38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	eb42 0303 	adc.w	r3, r2, r3
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001f4a:	f7fe f93d 	bl	80001c8 <__aeabi_uldivmod>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <UART_SetConfig+0x2d4>)
 8001f54:	fba3 1302 	umull	r1, r3, r3, r2
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	2164      	movs	r1, #100	@ 0x64
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	3332      	adds	r3, #50	@ 0x32
 8001f66:	4a08      	ldr	r2, [pc, #32]	@ (8001f88 <UART_SetConfig+0x2d4>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	f003 0207 	and.w	r2, r3, #7
 8001f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4422      	add	r2, r4
 8001f7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f7c:	e106      	b.n	800218c <UART_SetConfig+0x4d8>
 8001f7e:	bf00      	nop
 8001f80:	40011000 	.word	0x40011000
 8001f84:	40011400 	.word	0x40011400
 8001f88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f90:	2200      	movs	r2, #0
 8001f92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001f96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001f9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001f9e:	4642      	mov	r2, r8
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	1891      	adds	r1, r2, r2
 8001fa4:	6239      	str	r1, [r7, #32]
 8001fa6:	415b      	adcs	r3, r3
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001faa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fae:	4641      	mov	r1, r8
 8001fb0:	1854      	adds	r4, r2, r1
 8001fb2:	4649      	mov	r1, r9
 8001fb4:	eb43 0501 	adc.w	r5, r3, r1
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	00eb      	lsls	r3, r5, #3
 8001fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fc6:	00e2      	lsls	r2, r4, #3
 8001fc8:	4614      	mov	r4, r2
 8001fca:	461d      	mov	r5, r3
 8001fcc:	4643      	mov	r3, r8
 8001fce:	18e3      	adds	r3, r4, r3
 8001fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001fd4:	464b      	mov	r3, r9
 8001fd6:	eb45 0303 	adc.w	r3, r5, r3
 8001fda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001fea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	008b      	lsls	r3, r1, #2
 8001ffe:	4621      	mov	r1, r4
 8002000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002004:	4621      	mov	r1, r4
 8002006:	008a      	lsls	r2, r1, #2
 8002008:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800200c:	f7fe f8dc 	bl	80001c8 <__aeabi_uldivmod>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4b60      	ldr	r3, [pc, #384]	@ (8002198 <UART_SetConfig+0x4e4>)
 8002016:	fba3 2302 	umull	r2, r3, r3, r2
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	011c      	lsls	r4, r3, #4
 800201e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002022:	2200      	movs	r2, #0
 8002024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002028:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800202c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002030:	4642      	mov	r2, r8
 8002032:	464b      	mov	r3, r9
 8002034:	1891      	adds	r1, r2, r2
 8002036:	61b9      	str	r1, [r7, #24]
 8002038:	415b      	adcs	r3, r3
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002040:	4641      	mov	r1, r8
 8002042:	1851      	adds	r1, r2, r1
 8002044:	6139      	str	r1, [r7, #16]
 8002046:	4649      	mov	r1, r9
 8002048:	414b      	adcs	r3, r1
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002058:	4659      	mov	r1, fp
 800205a:	00cb      	lsls	r3, r1, #3
 800205c:	4651      	mov	r1, sl
 800205e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002062:	4651      	mov	r1, sl
 8002064:	00ca      	lsls	r2, r1, #3
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	4603      	mov	r3, r0
 800206c:	4642      	mov	r2, r8
 800206e:	189b      	adds	r3, r3, r2
 8002070:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002074:	464b      	mov	r3, r9
 8002076:	460a      	mov	r2, r1
 8002078:	eb42 0303 	adc.w	r3, r2, r3
 800207c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	67bb      	str	r3, [r7, #120]	@ 0x78
 800208a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002098:	4649      	mov	r1, r9
 800209a:	008b      	lsls	r3, r1, #2
 800209c:	4641      	mov	r1, r8
 800209e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020a2:	4641      	mov	r1, r8
 80020a4:	008a      	lsls	r2, r1, #2
 80020a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80020aa:	f7fe f88d 	bl	80001c8 <__aeabi_uldivmod>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4611      	mov	r1, r2
 80020b4:	4b38      	ldr	r3, [pc, #224]	@ (8002198 <UART_SetConfig+0x4e4>)
 80020b6:	fba3 2301 	umull	r2, r3, r3, r1
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2264      	movs	r2, #100	@ 0x64
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	1acb      	subs	r3, r1, r3
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	3332      	adds	r3, #50	@ 0x32
 80020c8:	4a33      	ldr	r2, [pc, #204]	@ (8002198 <UART_SetConfig+0x4e4>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020d4:	441c      	add	r4, r3
 80020d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020da:	2200      	movs	r2, #0
 80020dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80020de:	677a      	str	r2, [r7, #116]	@ 0x74
 80020e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80020e4:	4642      	mov	r2, r8
 80020e6:	464b      	mov	r3, r9
 80020e8:	1891      	adds	r1, r2, r2
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	415b      	adcs	r3, r3
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020f4:	4641      	mov	r1, r8
 80020f6:	1851      	adds	r1, r2, r1
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	4649      	mov	r1, r9
 80020fc:	414b      	adcs	r3, r1
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800210c:	4659      	mov	r1, fp
 800210e:	00cb      	lsls	r3, r1, #3
 8002110:	4651      	mov	r1, sl
 8002112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002116:	4651      	mov	r1, sl
 8002118:	00ca      	lsls	r2, r1, #3
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	4603      	mov	r3, r0
 8002120:	4642      	mov	r2, r8
 8002122:	189b      	adds	r3, r3, r2
 8002124:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002126:	464b      	mov	r3, r9
 8002128:	460a      	mov	r2, r1
 800212a:	eb42 0303 	adc.w	r3, r2, r3
 800212e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	663b      	str	r3, [r7, #96]	@ 0x60
 800213a:	667a      	str	r2, [r7, #100]	@ 0x64
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002148:	4649      	mov	r1, r9
 800214a:	008b      	lsls	r3, r1, #2
 800214c:	4641      	mov	r1, r8
 800214e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002152:	4641      	mov	r1, r8
 8002154:	008a      	lsls	r2, r1, #2
 8002156:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800215a:	f7fe f835 	bl	80001c8 <__aeabi_uldivmod>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <UART_SetConfig+0x4e4>)
 8002164:	fba3 1302 	umull	r1, r3, r3, r2
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	2164      	movs	r1, #100	@ 0x64
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	3332      	adds	r3, #50	@ 0x32
 8002176:	4a08      	ldr	r2, [pc, #32]	@ (8002198 <UART_SetConfig+0x4e4>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	f003 020f 	and.w	r2, r3, #15
 8002182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4422      	add	r2, r4
 800218a:	609a      	str	r2, [r3, #8]
}
 800218c:	bf00      	nop
 800218e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002192:	46bd      	mov	sp, r7
 8002194:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002198:	51eb851f 	.word	0x51eb851f

0800219c <std>:
 800219c:	2300      	movs	r3, #0
 800219e:	b510      	push	{r4, lr}
 80021a0:	4604      	mov	r4, r0
 80021a2:	e9c0 3300 	strd	r3, r3, [r0]
 80021a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021aa:	6083      	str	r3, [r0, #8]
 80021ac:	8181      	strh	r1, [r0, #12]
 80021ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80021b0:	81c2      	strh	r2, [r0, #14]
 80021b2:	6183      	str	r3, [r0, #24]
 80021b4:	4619      	mov	r1, r3
 80021b6:	2208      	movs	r2, #8
 80021b8:	305c      	adds	r0, #92	@ 0x5c
 80021ba:	f000 f9e7 	bl	800258c <memset>
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <std+0x58>)
 80021c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80021c2:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <std+0x5c>)
 80021c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80021c6:	4b0d      	ldr	r3, [pc, #52]	@ (80021fc <std+0x60>)
 80021c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80021ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <std+0x64>)
 80021cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80021ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <std+0x68>)
 80021d0:	6224      	str	r4, [r4, #32]
 80021d2:	429c      	cmp	r4, r3
 80021d4:	d006      	beq.n	80021e4 <std+0x48>
 80021d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80021da:	4294      	cmp	r4, r2
 80021dc:	d002      	beq.n	80021e4 <std+0x48>
 80021de:	33d0      	adds	r3, #208	@ 0xd0
 80021e0:	429c      	cmp	r4, r3
 80021e2:	d105      	bne.n	80021f0 <std+0x54>
 80021e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80021e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021ec:	f000 ba46 	b.w	800267c <__retarget_lock_init_recursive>
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	bf00      	nop
 80021f4:	080023dd 	.word	0x080023dd
 80021f8:	080023ff 	.word	0x080023ff
 80021fc:	08002437 	.word	0x08002437
 8002200:	0800245b 	.word	0x0800245b
 8002204:	200000d4 	.word	0x200000d4

08002208 <stdio_exit_handler>:
 8002208:	4a02      	ldr	r2, [pc, #8]	@ (8002214 <stdio_exit_handler+0xc>)
 800220a:	4903      	ldr	r1, [pc, #12]	@ (8002218 <stdio_exit_handler+0x10>)
 800220c:	4803      	ldr	r0, [pc, #12]	@ (800221c <stdio_exit_handler+0x14>)
 800220e:	f000 b869 	b.w	80022e4 <_fwalk_sglue>
 8002212:	bf00      	nop
 8002214:	2000000c 	.word	0x2000000c
 8002218:	0800297d 	.word	0x0800297d
 800221c:	2000001c 	.word	0x2000001c

08002220 <cleanup_stdio>:
 8002220:	6841      	ldr	r1, [r0, #4]
 8002222:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <cleanup_stdio+0x34>)
 8002224:	4299      	cmp	r1, r3
 8002226:	b510      	push	{r4, lr}
 8002228:	4604      	mov	r4, r0
 800222a:	d001      	beq.n	8002230 <cleanup_stdio+0x10>
 800222c:	f000 fba6 	bl	800297c <_fflush_r>
 8002230:	68a1      	ldr	r1, [r4, #8]
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <cleanup_stdio+0x38>)
 8002234:	4299      	cmp	r1, r3
 8002236:	d002      	beq.n	800223e <cleanup_stdio+0x1e>
 8002238:	4620      	mov	r0, r4
 800223a:	f000 fb9f 	bl	800297c <_fflush_r>
 800223e:	68e1      	ldr	r1, [r4, #12]
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <cleanup_stdio+0x3c>)
 8002242:	4299      	cmp	r1, r3
 8002244:	d004      	beq.n	8002250 <cleanup_stdio+0x30>
 8002246:	4620      	mov	r0, r4
 8002248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800224c:	f000 bb96 	b.w	800297c <_fflush_r>
 8002250:	bd10      	pop	{r4, pc}
 8002252:	bf00      	nop
 8002254:	200000d4 	.word	0x200000d4
 8002258:	2000013c 	.word	0x2000013c
 800225c:	200001a4 	.word	0x200001a4

08002260 <global_stdio_init.part.0>:
 8002260:	b510      	push	{r4, lr}
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <global_stdio_init.part.0+0x30>)
 8002264:	4c0b      	ldr	r4, [pc, #44]	@ (8002294 <global_stdio_init.part.0+0x34>)
 8002266:	4a0c      	ldr	r2, [pc, #48]	@ (8002298 <global_stdio_init.part.0+0x38>)
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	4620      	mov	r0, r4
 800226c:	2200      	movs	r2, #0
 800226e:	2104      	movs	r1, #4
 8002270:	f7ff ff94 	bl	800219c <std>
 8002274:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002278:	2201      	movs	r2, #1
 800227a:	2109      	movs	r1, #9
 800227c:	f7ff ff8e 	bl	800219c <std>
 8002280:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002284:	2202      	movs	r2, #2
 8002286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800228a:	2112      	movs	r1, #18
 800228c:	f7ff bf86 	b.w	800219c <std>
 8002290:	2000020c 	.word	0x2000020c
 8002294:	200000d4 	.word	0x200000d4
 8002298:	08002209 	.word	0x08002209

0800229c <__sfp_lock_acquire>:
 800229c:	4801      	ldr	r0, [pc, #4]	@ (80022a4 <__sfp_lock_acquire+0x8>)
 800229e:	f000 b9ee 	b.w	800267e <__retarget_lock_acquire_recursive>
 80022a2:	bf00      	nop
 80022a4:	20000215 	.word	0x20000215

080022a8 <__sfp_lock_release>:
 80022a8:	4801      	ldr	r0, [pc, #4]	@ (80022b0 <__sfp_lock_release+0x8>)
 80022aa:	f000 b9e9 	b.w	8002680 <__retarget_lock_release_recursive>
 80022ae:	bf00      	nop
 80022b0:	20000215 	.word	0x20000215

080022b4 <__sinit>:
 80022b4:	b510      	push	{r4, lr}
 80022b6:	4604      	mov	r4, r0
 80022b8:	f7ff fff0 	bl	800229c <__sfp_lock_acquire>
 80022bc:	6a23      	ldr	r3, [r4, #32]
 80022be:	b11b      	cbz	r3, 80022c8 <__sinit+0x14>
 80022c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022c4:	f7ff bff0 	b.w	80022a8 <__sfp_lock_release>
 80022c8:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <__sinit+0x28>)
 80022ca:	6223      	str	r3, [r4, #32]
 80022cc:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <__sinit+0x2c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f5      	bne.n	80022c0 <__sinit+0xc>
 80022d4:	f7ff ffc4 	bl	8002260 <global_stdio_init.part.0>
 80022d8:	e7f2      	b.n	80022c0 <__sinit+0xc>
 80022da:	bf00      	nop
 80022dc:	08002221 	.word	0x08002221
 80022e0:	2000020c 	.word	0x2000020c

080022e4 <_fwalk_sglue>:
 80022e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022e8:	4607      	mov	r7, r0
 80022ea:	4688      	mov	r8, r1
 80022ec:	4614      	mov	r4, r2
 80022ee:	2600      	movs	r6, #0
 80022f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80022f4:	f1b9 0901 	subs.w	r9, r9, #1
 80022f8:	d505      	bpl.n	8002306 <_fwalk_sglue+0x22>
 80022fa:	6824      	ldr	r4, [r4, #0]
 80022fc:	2c00      	cmp	r4, #0
 80022fe:	d1f7      	bne.n	80022f0 <_fwalk_sglue+0xc>
 8002300:	4630      	mov	r0, r6
 8002302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002306:	89ab      	ldrh	r3, [r5, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d907      	bls.n	800231c <_fwalk_sglue+0x38>
 800230c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002310:	3301      	adds	r3, #1
 8002312:	d003      	beq.n	800231c <_fwalk_sglue+0x38>
 8002314:	4629      	mov	r1, r5
 8002316:	4638      	mov	r0, r7
 8002318:	47c0      	blx	r8
 800231a:	4306      	orrs	r6, r0
 800231c:	3568      	adds	r5, #104	@ 0x68
 800231e:	e7e9      	b.n	80022f4 <_fwalk_sglue+0x10>

08002320 <_puts_r>:
 8002320:	6a03      	ldr	r3, [r0, #32]
 8002322:	b570      	push	{r4, r5, r6, lr}
 8002324:	6884      	ldr	r4, [r0, #8]
 8002326:	4605      	mov	r5, r0
 8002328:	460e      	mov	r6, r1
 800232a:	b90b      	cbnz	r3, 8002330 <_puts_r+0x10>
 800232c:	f7ff ffc2 	bl	80022b4 <__sinit>
 8002330:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002332:	07db      	lsls	r3, r3, #31
 8002334:	d405      	bmi.n	8002342 <_puts_r+0x22>
 8002336:	89a3      	ldrh	r3, [r4, #12]
 8002338:	0598      	lsls	r0, r3, #22
 800233a:	d402      	bmi.n	8002342 <_puts_r+0x22>
 800233c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800233e:	f000 f99e 	bl	800267e <__retarget_lock_acquire_recursive>
 8002342:	89a3      	ldrh	r3, [r4, #12]
 8002344:	0719      	lsls	r1, r3, #28
 8002346:	d502      	bpl.n	800234e <_puts_r+0x2e>
 8002348:	6923      	ldr	r3, [r4, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d135      	bne.n	80023ba <_puts_r+0x9a>
 800234e:	4621      	mov	r1, r4
 8002350:	4628      	mov	r0, r5
 8002352:	f000 f8c5 	bl	80024e0 <__swsetup_r>
 8002356:	b380      	cbz	r0, 80023ba <_puts_r+0x9a>
 8002358:	f04f 35ff 	mov.w	r5, #4294967295
 800235c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800235e:	07da      	lsls	r2, r3, #31
 8002360:	d405      	bmi.n	800236e <_puts_r+0x4e>
 8002362:	89a3      	ldrh	r3, [r4, #12]
 8002364:	059b      	lsls	r3, r3, #22
 8002366:	d402      	bmi.n	800236e <_puts_r+0x4e>
 8002368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800236a:	f000 f989 	bl	8002680 <__retarget_lock_release_recursive>
 800236e:	4628      	mov	r0, r5
 8002370:	bd70      	pop	{r4, r5, r6, pc}
 8002372:	2b00      	cmp	r3, #0
 8002374:	da04      	bge.n	8002380 <_puts_r+0x60>
 8002376:	69a2      	ldr	r2, [r4, #24]
 8002378:	429a      	cmp	r2, r3
 800237a:	dc17      	bgt.n	80023ac <_puts_r+0x8c>
 800237c:	290a      	cmp	r1, #10
 800237e:	d015      	beq.n	80023ac <_puts_r+0x8c>
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	6022      	str	r2, [r4, #0]
 8002386:	7019      	strb	r1, [r3, #0]
 8002388:	68a3      	ldr	r3, [r4, #8]
 800238a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800238e:	3b01      	subs	r3, #1
 8002390:	60a3      	str	r3, [r4, #8]
 8002392:	2900      	cmp	r1, #0
 8002394:	d1ed      	bne.n	8002372 <_puts_r+0x52>
 8002396:	2b00      	cmp	r3, #0
 8002398:	da11      	bge.n	80023be <_puts_r+0x9e>
 800239a:	4622      	mov	r2, r4
 800239c:	210a      	movs	r1, #10
 800239e:	4628      	mov	r0, r5
 80023a0:	f000 f85f 	bl	8002462 <__swbuf_r>
 80023a4:	3001      	adds	r0, #1
 80023a6:	d0d7      	beq.n	8002358 <_puts_r+0x38>
 80023a8:	250a      	movs	r5, #10
 80023aa:	e7d7      	b.n	800235c <_puts_r+0x3c>
 80023ac:	4622      	mov	r2, r4
 80023ae:	4628      	mov	r0, r5
 80023b0:	f000 f857 	bl	8002462 <__swbuf_r>
 80023b4:	3001      	adds	r0, #1
 80023b6:	d1e7      	bne.n	8002388 <_puts_r+0x68>
 80023b8:	e7ce      	b.n	8002358 <_puts_r+0x38>
 80023ba:	3e01      	subs	r6, #1
 80023bc:	e7e4      	b.n	8002388 <_puts_r+0x68>
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	6022      	str	r2, [r4, #0]
 80023c4:	220a      	movs	r2, #10
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e7ee      	b.n	80023a8 <_puts_r+0x88>
	...

080023cc <puts>:
 80023cc:	4b02      	ldr	r3, [pc, #8]	@ (80023d8 <puts+0xc>)
 80023ce:	4601      	mov	r1, r0
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	f7ff bfa5 	b.w	8002320 <_puts_r>
 80023d6:	bf00      	nop
 80023d8:	20000018 	.word	0x20000018

080023dc <__sread>:
 80023dc:	b510      	push	{r4, lr}
 80023de:	460c      	mov	r4, r1
 80023e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023e4:	f000 f8fc 	bl	80025e0 <_read_r>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	bfab      	itete	ge
 80023ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80023ee:	89a3      	ldrhlt	r3, [r4, #12]
 80023f0:	181b      	addge	r3, r3, r0
 80023f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80023f6:	bfac      	ite	ge
 80023f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80023fa:	81a3      	strhlt	r3, [r4, #12]
 80023fc:	bd10      	pop	{r4, pc}

080023fe <__swrite>:
 80023fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002402:	461f      	mov	r7, r3
 8002404:	898b      	ldrh	r3, [r1, #12]
 8002406:	05db      	lsls	r3, r3, #23
 8002408:	4605      	mov	r5, r0
 800240a:	460c      	mov	r4, r1
 800240c:	4616      	mov	r6, r2
 800240e:	d505      	bpl.n	800241c <__swrite+0x1e>
 8002410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002414:	2302      	movs	r3, #2
 8002416:	2200      	movs	r2, #0
 8002418:	f000 f8d0 	bl	80025bc <_lseek_r>
 800241c:	89a3      	ldrh	r3, [r4, #12]
 800241e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002422:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002426:	81a3      	strh	r3, [r4, #12]
 8002428:	4632      	mov	r2, r6
 800242a:	463b      	mov	r3, r7
 800242c:	4628      	mov	r0, r5
 800242e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002432:	f000 b8e7 	b.w	8002604 <_write_r>

08002436 <__sseek>:
 8002436:	b510      	push	{r4, lr}
 8002438:	460c      	mov	r4, r1
 800243a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800243e:	f000 f8bd 	bl	80025bc <_lseek_r>
 8002442:	1c43      	adds	r3, r0, #1
 8002444:	89a3      	ldrh	r3, [r4, #12]
 8002446:	bf15      	itete	ne
 8002448:	6560      	strne	r0, [r4, #84]	@ 0x54
 800244a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800244e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002452:	81a3      	strheq	r3, [r4, #12]
 8002454:	bf18      	it	ne
 8002456:	81a3      	strhne	r3, [r4, #12]
 8002458:	bd10      	pop	{r4, pc}

0800245a <__sclose>:
 800245a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800245e:	f000 b89d 	b.w	800259c <_close_r>

08002462 <__swbuf_r>:
 8002462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002464:	460e      	mov	r6, r1
 8002466:	4614      	mov	r4, r2
 8002468:	4605      	mov	r5, r0
 800246a:	b118      	cbz	r0, 8002474 <__swbuf_r+0x12>
 800246c:	6a03      	ldr	r3, [r0, #32]
 800246e:	b90b      	cbnz	r3, 8002474 <__swbuf_r+0x12>
 8002470:	f7ff ff20 	bl	80022b4 <__sinit>
 8002474:	69a3      	ldr	r3, [r4, #24]
 8002476:	60a3      	str	r3, [r4, #8]
 8002478:	89a3      	ldrh	r3, [r4, #12]
 800247a:	071a      	lsls	r2, r3, #28
 800247c:	d501      	bpl.n	8002482 <__swbuf_r+0x20>
 800247e:	6923      	ldr	r3, [r4, #16]
 8002480:	b943      	cbnz	r3, 8002494 <__swbuf_r+0x32>
 8002482:	4621      	mov	r1, r4
 8002484:	4628      	mov	r0, r5
 8002486:	f000 f82b 	bl	80024e0 <__swsetup_r>
 800248a:	b118      	cbz	r0, 8002494 <__swbuf_r+0x32>
 800248c:	f04f 37ff 	mov.w	r7, #4294967295
 8002490:	4638      	mov	r0, r7
 8002492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	6922      	ldr	r2, [r4, #16]
 8002498:	1a98      	subs	r0, r3, r2
 800249a:	6963      	ldr	r3, [r4, #20]
 800249c:	b2f6      	uxtb	r6, r6
 800249e:	4283      	cmp	r3, r0
 80024a0:	4637      	mov	r7, r6
 80024a2:	dc05      	bgt.n	80024b0 <__swbuf_r+0x4e>
 80024a4:	4621      	mov	r1, r4
 80024a6:	4628      	mov	r0, r5
 80024a8:	f000 fa68 	bl	800297c <_fflush_r>
 80024ac:	2800      	cmp	r0, #0
 80024ae:	d1ed      	bne.n	800248c <__swbuf_r+0x2a>
 80024b0:	68a3      	ldr	r3, [r4, #8]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	60a3      	str	r3, [r4, #8]
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	6022      	str	r2, [r4, #0]
 80024bc:	701e      	strb	r6, [r3, #0]
 80024be:	6962      	ldr	r2, [r4, #20]
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d004      	beq.n	80024d0 <__swbuf_r+0x6e>
 80024c6:	89a3      	ldrh	r3, [r4, #12]
 80024c8:	07db      	lsls	r3, r3, #31
 80024ca:	d5e1      	bpl.n	8002490 <__swbuf_r+0x2e>
 80024cc:	2e0a      	cmp	r6, #10
 80024ce:	d1df      	bne.n	8002490 <__swbuf_r+0x2e>
 80024d0:	4621      	mov	r1, r4
 80024d2:	4628      	mov	r0, r5
 80024d4:	f000 fa52 	bl	800297c <_fflush_r>
 80024d8:	2800      	cmp	r0, #0
 80024da:	d0d9      	beq.n	8002490 <__swbuf_r+0x2e>
 80024dc:	e7d6      	b.n	800248c <__swbuf_r+0x2a>
	...

080024e0 <__swsetup_r>:
 80024e0:	b538      	push	{r3, r4, r5, lr}
 80024e2:	4b29      	ldr	r3, [pc, #164]	@ (8002588 <__swsetup_r+0xa8>)
 80024e4:	4605      	mov	r5, r0
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	460c      	mov	r4, r1
 80024ea:	b118      	cbz	r0, 80024f4 <__swsetup_r+0x14>
 80024ec:	6a03      	ldr	r3, [r0, #32]
 80024ee:	b90b      	cbnz	r3, 80024f4 <__swsetup_r+0x14>
 80024f0:	f7ff fee0 	bl	80022b4 <__sinit>
 80024f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024f8:	0719      	lsls	r1, r3, #28
 80024fa:	d422      	bmi.n	8002542 <__swsetup_r+0x62>
 80024fc:	06da      	lsls	r2, r3, #27
 80024fe:	d407      	bmi.n	8002510 <__swsetup_r+0x30>
 8002500:	2209      	movs	r2, #9
 8002502:	602a      	str	r2, [r5, #0]
 8002504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002508:	81a3      	strh	r3, [r4, #12]
 800250a:	f04f 30ff 	mov.w	r0, #4294967295
 800250e:	e033      	b.n	8002578 <__swsetup_r+0x98>
 8002510:	0758      	lsls	r0, r3, #29
 8002512:	d512      	bpl.n	800253a <__swsetup_r+0x5a>
 8002514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002516:	b141      	cbz	r1, 800252a <__swsetup_r+0x4a>
 8002518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800251c:	4299      	cmp	r1, r3
 800251e:	d002      	beq.n	8002526 <__swsetup_r+0x46>
 8002520:	4628      	mov	r0, r5
 8002522:	f000 f8af 	bl	8002684 <_free_r>
 8002526:	2300      	movs	r3, #0
 8002528:	6363      	str	r3, [r4, #52]	@ 0x34
 800252a:	89a3      	ldrh	r3, [r4, #12]
 800252c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002530:	81a3      	strh	r3, [r4, #12]
 8002532:	2300      	movs	r3, #0
 8002534:	6063      	str	r3, [r4, #4]
 8002536:	6923      	ldr	r3, [r4, #16]
 8002538:	6023      	str	r3, [r4, #0]
 800253a:	89a3      	ldrh	r3, [r4, #12]
 800253c:	f043 0308 	orr.w	r3, r3, #8
 8002540:	81a3      	strh	r3, [r4, #12]
 8002542:	6923      	ldr	r3, [r4, #16]
 8002544:	b94b      	cbnz	r3, 800255a <__swsetup_r+0x7a>
 8002546:	89a3      	ldrh	r3, [r4, #12]
 8002548:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800254c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002550:	d003      	beq.n	800255a <__swsetup_r+0x7a>
 8002552:	4621      	mov	r1, r4
 8002554:	4628      	mov	r0, r5
 8002556:	f000 fa5f 	bl	8002a18 <__smakebuf_r>
 800255a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800255e:	f013 0201 	ands.w	r2, r3, #1
 8002562:	d00a      	beq.n	800257a <__swsetup_r+0x9a>
 8002564:	2200      	movs	r2, #0
 8002566:	60a2      	str	r2, [r4, #8]
 8002568:	6962      	ldr	r2, [r4, #20]
 800256a:	4252      	negs	r2, r2
 800256c:	61a2      	str	r2, [r4, #24]
 800256e:	6922      	ldr	r2, [r4, #16]
 8002570:	b942      	cbnz	r2, 8002584 <__swsetup_r+0xa4>
 8002572:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002576:	d1c5      	bne.n	8002504 <__swsetup_r+0x24>
 8002578:	bd38      	pop	{r3, r4, r5, pc}
 800257a:	0799      	lsls	r1, r3, #30
 800257c:	bf58      	it	pl
 800257e:	6962      	ldrpl	r2, [r4, #20]
 8002580:	60a2      	str	r2, [r4, #8]
 8002582:	e7f4      	b.n	800256e <__swsetup_r+0x8e>
 8002584:	2000      	movs	r0, #0
 8002586:	e7f7      	b.n	8002578 <__swsetup_r+0x98>
 8002588:	20000018 	.word	0x20000018

0800258c <memset>:
 800258c:	4402      	add	r2, r0
 800258e:	4603      	mov	r3, r0
 8002590:	4293      	cmp	r3, r2
 8002592:	d100      	bne.n	8002596 <memset+0xa>
 8002594:	4770      	bx	lr
 8002596:	f803 1b01 	strb.w	r1, [r3], #1
 800259a:	e7f9      	b.n	8002590 <memset+0x4>

0800259c <_close_r>:
 800259c:	b538      	push	{r3, r4, r5, lr}
 800259e:	4d06      	ldr	r5, [pc, #24]	@ (80025b8 <_close_r+0x1c>)
 80025a0:	2300      	movs	r3, #0
 80025a2:	4604      	mov	r4, r0
 80025a4:	4608      	mov	r0, r1
 80025a6:	602b      	str	r3, [r5, #0]
 80025a8:	f7fe f9a0 	bl	80008ec <_close>
 80025ac:	1c43      	adds	r3, r0, #1
 80025ae:	d102      	bne.n	80025b6 <_close_r+0x1a>
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	b103      	cbz	r3, 80025b6 <_close_r+0x1a>
 80025b4:	6023      	str	r3, [r4, #0]
 80025b6:	bd38      	pop	{r3, r4, r5, pc}
 80025b8:	20000210 	.word	0x20000210

080025bc <_lseek_r>:
 80025bc:	b538      	push	{r3, r4, r5, lr}
 80025be:	4d07      	ldr	r5, [pc, #28]	@ (80025dc <_lseek_r+0x20>)
 80025c0:	4604      	mov	r4, r0
 80025c2:	4608      	mov	r0, r1
 80025c4:	4611      	mov	r1, r2
 80025c6:	2200      	movs	r2, #0
 80025c8:	602a      	str	r2, [r5, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	f7fe f9b5 	bl	800093a <_lseek>
 80025d0:	1c43      	adds	r3, r0, #1
 80025d2:	d102      	bne.n	80025da <_lseek_r+0x1e>
 80025d4:	682b      	ldr	r3, [r5, #0]
 80025d6:	b103      	cbz	r3, 80025da <_lseek_r+0x1e>
 80025d8:	6023      	str	r3, [r4, #0]
 80025da:	bd38      	pop	{r3, r4, r5, pc}
 80025dc:	20000210 	.word	0x20000210

080025e0 <_read_r>:
 80025e0:	b538      	push	{r3, r4, r5, lr}
 80025e2:	4d07      	ldr	r5, [pc, #28]	@ (8002600 <_read_r+0x20>)
 80025e4:	4604      	mov	r4, r0
 80025e6:	4608      	mov	r0, r1
 80025e8:	4611      	mov	r1, r2
 80025ea:	2200      	movs	r2, #0
 80025ec:	602a      	str	r2, [r5, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f7fe f95f 	bl	80008b2 <_read>
 80025f4:	1c43      	adds	r3, r0, #1
 80025f6:	d102      	bne.n	80025fe <_read_r+0x1e>
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	b103      	cbz	r3, 80025fe <_read_r+0x1e>
 80025fc:	6023      	str	r3, [r4, #0]
 80025fe:	bd38      	pop	{r3, r4, r5, pc}
 8002600:	20000210 	.word	0x20000210

08002604 <_write_r>:
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	4d07      	ldr	r5, [pc, #28]	@ (8002624 <_write_r+0x20>)
 8002608:	4604      	mov	r4, r0
 800260a:	4608      	mov	r0, r1
 800260c:	4611      	mov	r1, r2
 800260e:	2200      	movs	r2, #0
 8002610:	602a      	str	r2, [r5, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	f7fd ff6e 	bl	80004f4 <_write>
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	d102      	bne.n	8002622 <_write_r+0x1e>
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	b103      	cbz	r3, 8002622 <_write_r+0x1e>
 8002620:	6023      	str	r3, [r4, #0]
 8002622:	bd38      	pop	{r3, r4, r5, pc}
 8002624:	20000210 	.word	0x20000210

08002628 <__errno>:
 8002628:	4b01      	ldr	r3, [pc, #4]	@ (8002630 <__errno+0x8>)
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000018 	.word	0x20000018

08002634 <__libc_init_array>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	4d0d      	ldr	r5, [pc, #52]	@ (800266c <__libc_init_array+0x38>)
 8002638:	4c0d      	ldr	r4, [pc, #52]	@ (8002670 <__libc_init_array+0x3c>)
 800263a:	1b64      	subs	r4, r4, r5
 800263c:	10a4      	asrs	r4, r4, #2
 800263e:	2600      	movs	r6, #0
 8002640:	42a6      	cmp	r6, r4
 8002642:	d109      	bne.n	8002658 <__libc_init_array+0x24>
 8002644:	4d0b      	ldr	r5, [pc, #44]	@ (8002674 <__libc_init_array+0x40>)
 8002646:	4c0c      	ldr	r4, [pc, #48]	@ (8002678 <__libc_init_array+0x44>)
 8002648:	f000 fa54 	bl	8002af4 <_init>
 800264c:	1b64      	subs	r4, r4, r5
 800264e:	10a4      	asrs	r4, r4, #2
 8002650:	2600      	movs	r6, #0
 8002652:	42a6      	cmp	r6, r4
 8002654:	d105      	bne.n	8002662 <__libc_init_array+0x2e>
 8002656:	bd70      	pop	{r4, r5, r6, pc}
 8002658:	f855 3b04 	ldr.w	r3, [r5], #4
 800265c:	4798      	blx	r3
 800265e:	3601      	adds	r6, #1
 8002660:	e7ee      	b.n	8002640 <__libc_init_array+0xc>
 8002662:	f855 3b04 	ldr.w	r3, [r5], #4
 8002666:	4798      	blx	r3
 8002668:	3601      	adds	r6, #1
 800266a:	e7f2      	b.n	8002652 <__libc_init_array+0x1e>
 800266c:	08002b48 	.word	0x08002b48
 8002670:	08002b48 	.word	0x08002b48
 8002674:	08002b48 	.word	0x08002b48
 8002678:	08002b4c 	.word	0x08002b4c

0800267c <__retarget_lock_init_recursive>:
 800267c:	4770      	bx	lr

0800267e <__retarget_lock_acquire_recursive>:
 800267e:	4770      	bx	lr

08002680 <__retarget_lock_release_recursive>:
 8002680:	4770      	bx	lr
	...

08002684 <_free_r>:
 8002684:	b538      	push	{r3, r4, r5, lr}
 8002686:	4605      	mov	r5, r0
 8002688:	2900      	cmp	r1, #0
 800268a:	d041      	beq.n	8002710 <_free_r+0x8c>
 800268c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002690:	1f0c      	subs	r4, r1, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	bfb8      	it	lt
 8002696:	18e4      	addlt	r4, r4, r3
 8002698:	f000 f8e0 	bl	800285c <__malloc_lock>
 800269c:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <_free_r+0x90>)
 800269e:	6813      	ldr	r3, [r2, #0]
 80026a0:	b933      	cbnz	r3, 80026b0 <_free_r+0x2c>
 80026a2:	6063      	str	r3, [r4, #4]
 80026a4:	6014      	str	r4, [r2, #0]
 80026a6:	4628      	mov	r0, r5
 80026a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026ac:	f000 b8dc 	b.w	8002868 <__malloc_unlock>
 80026b0:	42a3      	cmp	r3, r4
 80026b2:	d908      	bls.n	80026c6 <_free_r+0x42>
 80026b4:	6820      	ldr	r0, [r4, #0]
 80026b6:	1821      	adds	r1, r4, r0
 80026b8:	428b      	cmp	r3, r1
 80026ba:	bf01      	itttt	eq
 80026bc:	6819      	ldreq	r1, [r3, #0]
 80026be:	685b      	ldreq	r3, [r3, #4]
 80026c0:	1809      	addeq	r1, r1, r0
 80026c2:	6021      	streq	r1, [r4, #0]
 80026c4:	e7ed      	b.n	80026a2 <_free_r+0x1e>
 80026c6:	461a      	mov	r2, r3
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	b10b      	cbz	r3, 80026d0 <_free_r+0x4c>
 80026cc:	42a3      	cmp	r3, r4
 80026ce:	d9fa      	bls.n	80026c6 <_free_r+0x42>
 80026d0:	6811      	ldr	r1, [r2, #0]
 80026d2:	1850      	adds	r0, r2, r1
 80026d4:	42a0      	cmp	r0, r4
 80026d6:	d10b      	bne.n	80026f0 <_free_r+0x6c>
 80026d8:	6820      	ldr	r0, [r4, #0]
 80026da:	4401      	add	r1, r0
 80026dc:	1850      	adds	r0, r2, r1
 80026de:	4283      	cmp	r3, r0
 80026e0:	6011      	str	r1, [r2, #0]
 80026e2:	d1e0      	bne.n	80026a6 <_free_r+0x22>
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	6053      	str	r3, [r2, #4]
 80026ea:	4408      	add	r0, r1
 80026ec:	6010      	str	r0, [r2, #0]
 80026ee:	e7da      	b.n	80026a6 <_free_r+0x22>
 80026f0:	d902      	bls.n	80026f8 <_free_r+0x74>
 80026f2:	230c      	movs	r3, #12
 80026f4:	602b      	str	r3, [r5, #0]
 80026f6:	e7d6      	b.n	80026a6 <_free_r+0x22>
 80026f8:	6820      	ldr	r0, [r4, #0]
 80026fa:	1821      	adds	r1, r4, r0
 80026fc:	428b      	cmp	r3, r1
 80026fe:	bf04      	itt	eq
 8002700:	6819      	ldreq	r1, [r3, #0]
 8002702:	685b      	ldreq	r3, [r3, #4]
 8002704:	6063      	str	r3, [r4, #4]
 8002706:	bf04      	itt	eq
 8002708:	1809      	addeq	r1, r1, r0
 800270a:	6021      	streq	r1, [r4, #0]
 800270c:	6054      	str	r4, [r2, #4]
 800270e:	e7ca      	b.n	80026a6 <_free_r+0x22>
 8002710:	bd38      	pop	{r3, r4, r5, pc}
 8002712:	bf00      	nop
 8002714:	2000021c 	.word	0x2000021c

08002718 <sbrk_aligned>:
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	4e0f      	ldr	r6, [pc, #60]	@ (8002758 <sbrk_aligned+0x40>)
 800271c:	460c      	mov	r4, r1
 800271e:	6831      	ldr	r1, [r6, #0]
 8002720:	4605      	mov	r5, r0
 8002722:	b911      	cbnz	r1, 800272a <sbrk_aligned+0x12>
 8002724:	f000 f9d6 	bl	8002ad4 <_sbrk_r>
 8002728:	6030      	str	r0, [r6, #0]
 800272a:	4621      	mov	r1, r4
 800272c:	4628      	mov	r0, r5
 800272e:	f000 f9d1 	bl	8002ad4 <_sbrk_r>
 8002732:	1c43      	adds	r3, r0, #1
 8002734:	d103      	bne.n	800273e <sbrk_aligned+0x26>
 8002736:	f04f 34ff 	mov.w	r4, #4294967295
 800273a:	4620      	mov	r0, r4
 800273c:	bd70      	pop	{r4, r5, r6, pc}
 800273e:	1cc4      	adds	r4, r0, #3
 8002740:	f024 0403 	bic.w	r4, r4, #3
 8002744:	42a0      	cmp	r0, r4
 8002746:	d0f8      	beq.n	800273a <sbrk_aligned+0x22>
 8002748:	1a21      	subs	r1, r4, r0
 800274a:	4628      	mov	r0, r5
 800274c:	f000 f9c2 	bl	8002ad4 <_sbrk_r>
 8002750:	3001      	adds	r0, #1
 8002752:	d1f2      	bne.n	800273a <sbrk_aligned+0x22>
 8002754:	e7ef      	b.n	8002736 <sbrk_aligned+0x1e>
 8002756:	bf00      	nop
 8002758:	20000218 	.word	0x20000218

0800275c <_malloc_r>:
 800275c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002760:	1ccd      	adds	r5, r1, #3
 8002762:	f025 0503 	bic.w	r5, r5, #3
 8002766:	3508      	adds	r5, #8
 8002768:	2d0c      	cmp	r5, #12
 800276a:	bf38      	it	cc
 800276c:	250c      	movcc	r5, #12
 800276e:	2d00      	cmp	r5, #0
 8002770:	4606      	mov	r6, r0
 8002772:	db01      	blt.n	8002778 <_malloc_r+0x1c>
 8002774:	42a9      	cmp	r1, r5
 8002776:	d904      	bls.n	8002782 <_malloc_r+0x26>
 8002778:	230c      	movs	r3, #12
 800277a:	6033      	str	r3, [r6, #0]
 800277c:	2000      	movs	r0, #0
 800277e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002782:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002858 <_malloc_r+0xfc>
 8002786:	f000 f869 	bl	800285c <__malloc_lock>
 800278a:	f8d8 3000 	ldr.w	r3, [r8]
 800278e:	461c      	mov	r4, r3
 8002790:	bb44      	cbnz	r4, 80027e4 <_malloc_r+0x88>
 8002792:	4629      	mov	r1, r5
 8002794:	4630      	mov	r0, r6
 8002796:	f7ff ffbf 	bl	8002718 <sbrk_aligned>
 800279a:	1c43      	adds	r3, r0, #1
 800279c:	4604      	mov	r4, r0
 800279e:	d158      	bne.n	8002852 <_malloc_r+0xf6>
 80027a0:	f8d8 4000 	ldr.w	r4, [r8]
 80027a4:	4627      	mov	r7, r4
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d143      	bne.n	8002832 <_malloc_r+0xd6>
 80027aa:	2c00      	cmp	r4, #0
 80027ac:	d04b      	beq.n	8002846 <_malloc_r+0xea>
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	4639      	mov	r1, r7
 80027b2:	4630      	mov	r0, r6
 80027b4:	eb04 0903 	add.w	r9, r4, r3
 80027b8:	f000 f98c 	bl	8002ad4 <_sbrk_r>
 80027bc:	4581      	cmp	r9, r0
 80027be:	d142      	bne.n	8002846 <_malloc_r+0xea>
 80027c0:	6821      	ldr	r1, [r4, #0]
 80027c2:	1a6d      	subs	r5, r5, r1
 80027c4:	4629      	mov	r1, r5
 80027c6:	4630      	mov	r0, r6
 80027c8:	f7ff ffa6 	bl	8002718 <sbrk_aligned>
 80027cc:	3001      	adds	r0, #1
 80027ce:	d03a      	beq.n	8002846 <_malloc_r+0xea>
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	442b      	add	r3, r5
 80027d4:	6023      	str	r3, [r4, #0]
 80027d6:	f8d8 3000 	ldr.w	r3, [r8]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	bb62      	cbnz	r2, 8002838 <_malloc_r+0xdc>
 80027de:	f8c8 7000 	str.w	r7, [r8]
 80027e2:	e00f      	b.n	8002804 <_malloc_r+0xa8>
 80027e4:	6822      	ldr	r2, [r4, #0]
 80027e6:	1b52      	subs	r2, r2, r5
 80027e8:	d420      	bmi.n	800282c <_malloc_r+0xd0>
 80027ea:	2a0b      	cmp	r2, #11
 80027ec:	d917      	bls.n	800281e <_malloc_r+0xc2>
 80027ee:	1961      	adds	r1, r4, r5
 80027f0:	42a3      	cmp	r3, r4
 80027f2:	6025      	str	r5, [r4, #0]
 80027f4:	bf18      	it	ne
 80027f6:	6059      	strne	r1, [r3, #4]
 80027f8:	6863      	ldr	r3, [r4, #4]
 80027fa:	bf08      	it	eq
 80027fc:	f8c8 1000 	streq.w	r1, [r8]
 8002800:	5162      	str	r2, [r4, r5]
 8002802:	604b      	str	r3, [r1, #4]
 8002804:	4630      	mov	r0, r6
 8002806:	f000 f82f 	bl	8002868 <__malloc_unlock>
 800280a:	f104 000b 	add.w	r0, r4, #11
 800280e:	1d23      	adds	r3, r4, #4
 8002810:	f020 0007 	bic.w	r0, r0, #7
 8002814:	1ac2      	subs	r2, r0, r3
 8002816:	bf1c      	itt	ne
 8002818:	1a1b      	subne	r3, r3, r0
 800281a:	50a3      	strne	r3, [r4, r2]
 800281c:	e7af      	b.n	800277e <_malloc_r+0x22>
 800281e:	6862      	ldr	r2, [r4, #4]
 8002820:	42a3      	cmp	r3, r4
 8002822:	bf0c      	ite	eq
 8002824:	f8c8 2000 	streq.w	r2, [r8]
 8002828:	605a      	strne	r2, [r3, #4]
 800282a:	e7eb      	b.n	8002804 <_malloc_r+0xa8>
 800282c:	4623      	mov	r3, r4
 800282e:	6864      	ldr	r4, [r4, #4]
 8002830:	e7ae      	b.n	8002790 <_malloc_r+0x34>
 8002832:	463c      	mov	r4, r7
 8002834:	687f      	ldr	r7, [r7, #4]
 8002836:	e7b6      	b.n	80027a6 <_malloc_r+0x4a>
 8002838:	461a      	mov	r2, r3
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	42a3      	cmp	r3, r4
 800283e:	d1fb      	bne.n	8002838 <_malloc_r+0xdc>
 8002840:	2300      	movs	r3, #0
 8002842:	6053      	str	r3, [r2, #4]
 8002844:	e7de      	b.n	8002804 <_malloc_r+0xa8>
 8002846:	230c      	movs	r3, #12
 8002848:	6033      	str	r3, [r6, #0]
 800284a:	4630      	mov	r0, r6
 800284c:	f000 f80c 	bl	8002868 <__malloc_unlock>
 8002850:	e794      	b.n	800277c <_malloc_r+0x20>
 8002852:	6005      	str	r5, [r0, #0]
 8002854:	e7d6      	b.n	8002804 <_malloc_r+0xa8>
 8002856:	bf00      	nop
 8002858:	2000021c 	.word	0x2000021c

0800285c <__malloc_lock>:
 800285c:	4801      	ldr	r0, [pc, #4]	@ (8002864 <__malloc_lock+0x8>)
 800285e:	f7ff bf0e 	b.w	800267e <__retarget_lock_acquire_recursive>
 8002862:	bf00      	nop
 8002864:	20000214 	.word	0x20000214

08002868 <__malloc_unlock>:
 8002868:	4801      	ldr	r0, [pc, #4]	@ (8002870 <__malloc_unlock+0x8>)
 800286a:	f7ff bf09 	b.w	8002680 <__retarget_lock_release_recursive>
 800286e:	bf00      	nop
 8002870:	20000214 	.word	0x20000214

08002874 <__sflush_r>:
 8002874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800287c:	0716      	lsls	r6, r2, #28
 800287e:	4605      	mov	r5, r0
 8002880:	460c      	mov	r4, r1
 8002882:	d454      	bmi.n	800292e <__sflush_r+0xba>
 8002884:	684b      	ldr	r3, [r1, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	dc02      	bgt.n	8002890 <__sflush_r+0x1c>
 800288a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	dd48      	ble.n	8002922 <__sflush_r+0xae>
 8002890:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002892:	2e00      	cmp	r6, #0
 8002894:	d045      	beq.n	8002922 <__sflush_r+0xae>
 8002896:	2300      	movs	r3, #0
 8002898:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800289c:	682f      	ldr	r7, [r5, #0]
 800289e:	6a21      	ldr	r1, [r4, #32]
 80028a0:	602b      	str	r3, [r5, #0]
 80028a2:	d030      	beq.n	8002906 <__sflush_r+0x92>
 80028a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80028a6:	89a3      	ldrh	r3, [r4, #12]
 80028a8:	0759      	lsls	r1, r3, #29
 80028aa:	d505      	bpl.n	80028b8 <__sflush_r+0x44>
 80028ac:	6863      	ldr	r3, [r4, #4]
 80028ae:	1ad2      	subs	r2, r2, r3
 80028b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80028b2:	b10b      	cbz	r3, 80028b8 <__sflush_r+0x44>
 80028b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80028b6:	1ad2      	subs	r2, r2, r3
 80028b8:	2300      	movs	r3, #0
 80028ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80028bc:	6a21      	ldr	r1, [r4, #32]
 80028be:	4628      	mov	r0, r5
 80028c0:	47b0      	blx	r6
 80028c2:	1c43      	adds	r3, r0, #1
 80028c4:	89a3      	ldrh	r3, [r4, #12]
 80028c6:	d106      	bne.n	80028d6 <__sflush_r+0x62>
 80028c8:	6829      	ldr	r1, [r5, #0]
 80028ca:	291d      	cmp	r1, #29
 80028cc:	d82b      	bhi.n	8002926 <__sflush_r+0xb2>
 80028ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002978 <__sflush_r+0x104>)
 80028d0:	40ca      	lsrs	r2, r1
 80028d2:	07d6      	lsls	r6, r2, #31
 80028d4:	d527      	bpl.n	8002926 <__sflush_r+0xb2>
 80028d6:	2200      	movs	r2, #0
 80028d8:	6062      	str	r2, [r4, #4]
 80028da:	04d9      	lsls	r1, r3, #19
 80028dc:	6922      	ldr	r2, [r4, #16]
 80028de:	6022      	str	r2, [r4, #0]
 80028e0:	d504      	bpl.n	80028ec <__sflush_r+0x78>
 80028e2:	1c42      	adds	r2, r0, #1
 80028e4:	d101      	bne.n	80028ea <__sflush_r+0x76>
 80028e6:	682b      	ldr	r3, [r5, #0]
 80028e8:	b903      	cbnz	r3, 80028ec <__sflush_r+0x78>
 80028ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80028ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80028ee:	602f      	str	r7, [r5, #0]
 80028f0:	b1b9      	cbz	r1, 8002922 <__sflush_r+0xae>
 80028f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80028f6:	4299      	cmp	r1, r3
 80028f8:	d002      	beq.n	8002900 <__sflush_r+0x8c>
 80028fa:	4628      	mov	r0, r5
 80028fc:	f7ff fec2 	bl	8002684 <_free_r>
 8002900:	2300      	movs	r3, #0
 8002902:	6363      	str	r3, [r4, #52]	@ 0x34
 8002904:	e00d      	b.n	8002922 <__sflush_r+0xae>
 8002906:	2301      	movs	r3, #1
 8002908:	4628      	mov	r0, r5
 800290a:	47b0      	blx	r6
 800290c:	4602      	mov	r2, r0
 800290e:	1c50      	adds	r0, r2, #1
 8002910:	d1c9      	bne.n	80028a6 <__sflush_r+0x32>
 8002912:	682b      	ldr	r3, [r5, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0c6      	beq.n	80028a6 <__sflush_r+0x32>
 8002918:	2b1d      	cmp	r3, #29
 800291a:	d001      	beq.n	8002920 <__sflush_r+0xac>
 800291c:	2b16      	cmp	r3, #22
 800291e:	d11e      	bne.n	800295e <__sflush_r+0xea>
 8002920:	602f      	str	r7, [r5, #0]
 8002922:	2000      	movs	r0, #0
 8002924:	e022      	b.n	800296c <__sflush_r+0xf8>
 8002926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800292a:	b21b      	sxth	r3, r3
 800292c:	e01b      	b.n	8002966 <__sflush_r+0xf2>
 800292e:	690f      	ldr	r7, [r1, #16]
 8002930:	2f00      	cmp	r7, #0
 8002932:	d0f6      	beq.n	8002922 <__sflush_r+0xae>
 8002934:	0793      	lsls	r3, r2, #30
 8002936:	680e      	ldr	r6, [r1, #0]
 8002938:	bf08      	it	eq
 800293a:	694b      	ldreq	r3, [r1, #20]
 800293c:	600f      	str	r7, [r1, #0]
 800293e:	bf18      	it	ne
 8002940:	2300      	movne	r3, #0
 8002942:	eba6 0807 	sub.w	r8, r6, r7
 8002946:	608b      	str	r3, [r1, #8]
 8002948:	f1b8 0f00 	cmp.w	r8, #0
 800294c:	dde9      	ble.n	8002922 <__sflush_r+0xae>
 800294e:	6a21      	ldr	r1, [r4, #32]
 8002950:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002952:	4643      	mov	r3, r8
 8002954:	463a      	mov	r2, r7
 8002956:	4628      	mov	r0, r5
 8002958:	47b0      	blx	r6
 800295a:	2800      	cmp	r0, #0
 800295c:	dc08      	bgt.n	8002970 <__sflush_r+0xfc>
 800295e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002966:	81a3      	strh	r3, [r4, #12]
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002970:	4407      	add	r7, r0
 8002972:	eba8 0800 	sub.w	r8, r8, r0
 8002976:	e7e7      	b.n	8002948 <__sflush_r+0xd4>
 8002978:	20400001 	.word	0x20400001

0800297c <_fflush_r>:
 800297c:	b538      	push	{r3, r4, r5, lr}
 800297e:	690b      	ldr	r3, [r1, #16]
 8002980:	4605      	mov	r5, r0
 8002982:	460c      	mov	r4, r1
 8002984:	b913      	cbnz	r3, 800298c <_fflush_r+0x10>
 8002986:	2500      	movs	r5, #0
 8002988:	4628      	mov	r0, r5
 800298a:	bd38      	pop	{r3, r4, r5, pc}
 800298c:	b118      	cbz	r0, 8002996 <_fflush_r+0x1a>
 800298e:	6a03      	ldr	r3, [r0, #32]
 8002990:	b90b      	cbnz	r3, 8002996 <_fflush_r+0x1a>
 8002992:	f7ff fc8f 	bl	80022b4 <__sinit>
 8002996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f3      	beq.n	8002986 <_fflush_r+0xa>
 800299e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80029a0:	07d0      	lsls	r0, r2, #31
 80029a2:	d404      	bmi.n	80029ae <_fflush_r+0x32>
 80029a4:	0599      	lsls	r1, r3, #22
 80029a6:	d402      	bmi.n	80029ae <_fflush_r+0x32>
 80029a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80029aa:	f7ff fe68 	bl	800267e <__retarget_lock_acquire_recursive>
 80029ae:	4628      	mov	r0, r5
 80029b0:	4621      	mov	r1, r4
 80029b2:	f7ff ff5f 	bl	8002874 <__sflush_r>
 80029b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80029b8:	07da      	lsls	r2, r3, #31
 80029ba:	4605      	mov	r5, r0
 80029bc:	d4e4      	bmi.n	8002988 <_fflush_r+0xc>
 80029be:	89a3      	ldrh	r3, [r4, #12]
 80029c0:	059b      	lsls	r3, r3, #22
 80029c2:	d4e1      	bmi.n	8002988 <_fflush_r+0xc>
 80029c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80029c6:	f7ff fe5b 	bl	8002680 <__retarget_lock_release_recursive>
 80029ca:	e7dd      	b.n	8002988 <_fflush_r+0xc>

080029cc <__swhatbuf_r>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	460c      	mov	r4, r1
 80029d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029d4:	2900      	cmp	r1, #0
 80029d6:	b096      	sub	sp, #88	@ 0x58
 80029d8:	4615      	mov	r5, r2
 80029da:	461e      	mov	r6, r3
 80029dc:	da0d      	bge.n	80029fa <__swhatbuf_r+0x2e>
 80029de:	89a3      	ldrh	r3, [r4, #12]
 80029e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80029e4:	f04f 0100 	mov.w	r1, #0
 80029e8:	bf14      	ite	ne
 80029ea:	2340      	movne	r3, #64	@ 0x40
 80029ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80029f0:	2000      	movs	r0, #0
 80029f2:	6031      	str	r1, [r6, #0]
 80029f4:	602b      	str	r3, [r5, #0]
 80029f6:	b016      	add	sp, #88	@ 0x58
 80029f8:	bd70      	pop	{r4, r5, r6, pc}
 80029fa:	466a      	mov	r2, sp
 80029fc:	f000 f848 	bl	8002a90 <_fstat_r>
 8002a00:	2800      	cmp	r0, #0
 8002a02:	dbec      	blt.n	80029de <__swhatbuf_r+0x12>
 8002a04:	9901      	ldr	r1, [sp, #4]
 8002a06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002a0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002a0e:	4259      	negs	r1, r3
 8002a10:	4159      	adcs	r1, r3
 8002a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a16:	e7eb      	b.n	80029f0 <__swhatbuf_r+0x24>

08002a18 <__smakebuf_r>:
 8002a18:	898b      	ldrh	r3, [r1, #12]
 8002a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a1c:	079d      	lsls	r5, r3, #30
 8002a1e:	4606      	mov	r6, r0
 8002a20:	460c      	mov	r4, r1
 8002a22:	d507      	bpl.n	8002a34 <__smakebuf_r+0x1c>
 8002a24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002a28:	6023      	str	r3, [r4, #0]
 8002a2a:	6123      	str	r3, [r4, #16]
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	6163      	str	r3, [r4, #20]
 8002a30:	b003      	add	sp, #12
 8002a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a34:	ab01      	add	r3, sp, #4
 8002a36:	466a      	mov	r2, sp
 8002a38:	f7ff ffc8 	bl	80029cc <__swhatbuf_r>
 8002a3c:	9f00      	ldr	r7, [sp, #0]
 8002a3e:	4605      	mov	r5, r0
 8002a40:	4639      	mov	r1, r7
 8002a42:	4630      	mov	r0, r6
 8002a44:	f7ff fe8a 	bl	800275c <_malloc_r>
 8002a48:	b948      	cbnz	r0, 8002a5e <__smakebuf_r+0x46>
 8002a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a4e:	059a      	lsls	r2, r3, #22
 8002a50:	d4ee      	bmi.n	8002a30 <__smakebuf_r+0x18>
 8002a52:	f023 0303 	bic.w	r3, r3, #3
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	81a3      	strh	r3, [r4, #12]
 8002a5c:	e7e2      	b.n	8002a24 <__smakebuf_r+0xc>
 8002a5e:	89a3      	ldrh	r3, [r4, #12]
 8002a60:	6020      	str	r0, [r4, #0]
 8002a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a66:	81a3      	strh	r3, [r4, #12]
 8002a68:	9b01      	ldr	r3, [sp, #4]
 8002a6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002a6e:	b15b      	cbz	r3, 8002a88 <__smakebuf_r+0x70>
 8002a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a74:	4630      	mov	r0, r6
 8002a76:	f000 f81d 	bl	8002ab4 <_isatty_r>
 8002a7a:	b128      	cbz	r0, 8002a88 <__smakebuf_r+0x70>
 8002a7c:	89a3      	ldrh	r3, [r4, #12]
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	81a3      	strh	r3, [r4, #12]
 8002a88:	89a3      	ldrh	r3, [r4, #12]
 8002a8a:	431d      	orrs	r5, r3
 8002a8c:	81a5      	strh	r5, [r4, #12]
 8002a8e:	e7cf      	b.n	8002a30 <__smakebuf_r+0x18>

08002a90 <_fstat_r>:
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	4d07      	ldr	r5, [pc, #28]	@ (8002ab0 <_fstat_r+0x20>)
 8002a94:	2300      	movs	r3, #0
 8002a96:	4604      	mov	r4, r0
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	602b      	str	r3, [r5, #0]
 8002a9e:	f7fd ff31 	bl	8000904 <_fstat>
 8002aa2:	1c43      	adds	r3, r0, #1
 8002aa4:	d102      	bne.n	8002aac <_fstat_r+0x1c>
 8002aa6:	682b      	ldr	r3, [r5, #0]
 8002aa8:	b103      	cbz	r3, 8002aac <_fstat_r+0x1c>
 8002aaa:	6023      	str	r3, [r4, #0]
 8002aac:	bd38      	pop	{r3, r4, r5, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000210 	.word	0x20000210

08002ab4 <_isatty_r>:
 8002ab4:	b538      	push	{r3, r4, r5, lr}
 8002ab6:	4d06      	ldr	r5, [pc, #24]	@ (8002ad0 <_isatty_r+0x1c>)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	4604      	mov	r4, r0
 8002abc:	4608      	mov	r0, r1
 8002abe:	602b      	str	r3, [r5, #0]
 8002ac0:	f7fd ff30 	bl	8000924 <_isatty>
 8002ac4:	1c43      	adds	r3, r0, #1
 8002ac6:	d102      	bne.n	8002ace <_isatty_r+0x1a>
 8002ac8:	682b      	ldr	r3, [r5, #0]
 8002aca:	b103      	cbz	r3, 8002ace <_isatty_r+0x1a>
 8002acc:	6023      	str	r3, [r4, #0]
 8002ace:	bd38      	pop	{r3, r4, r5, pc}
 8002ad0:	20000210 	.word	0x20000210

08002ad4 <_sbrk_r>:
 8002ad4:	b538      	push	{r3, r4, r5, lr}
 8002ad6:	4d06      	ldr	r5, [pc, #24]	@ (8002af0 <_sbrk_r+0x1c>)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	4604      	mov	r4, r0
 8002adc:	4608      	mov	r0, r1
 8002ade:	602b      	str	r3, [r5, #0]
 8002ae0:	f7fd ff38 	bl	8000954 <_sbrk>
 8002ae4:	1c43      	adds	r3, r0, #1
 8002ae6:	d102      	bne.n	8002aee <_sbrk_r+0x1a>
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	b103      	cbz	r3, 8002aee <_sbrk_r+0x1a>
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	bd38      	pop	{r3, r4, r5, pc}
 8002af0:	20000210 	.word	0x20000210

08002af4 <_init>:
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	bf00      	nop
 8002af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afa:	bc08      	pop	{r3}
 8002afc:	469e      	mov	lr, r3
 8002afe:	4770      	bx	lr

08002b00 <_fini>:
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	bf00      	nop
 8002b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b06:	bc08      	pop	{r3}
 8002b08:	469e      	mov	lr, r3
 8002b0a:	4770      	bx	lr
